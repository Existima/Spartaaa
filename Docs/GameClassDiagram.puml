@startuml

title Game - Class Diagram

package "com.freetimers.spartacus.game"{
    +class GameFactory{
        Game createGame(Deck<IntrigueCard> intrigueDeck, Deck<MarketCard> marketDeck, Deck<DominusCard> dominusDeck)
    }

    GameFactory *-- Game

    +interface Game {
      +String getId()
      +boolean connect(String password)
      +void selectDominus(PlayerDto player)
      +int getRound()
    '  Upkeep
      +void chooseGladiatorsToRelease(DominusDto target)
    '  Intrigue phase
      +void chooseGladiatorsToRelease(DominusDto target)
      +DominusDto getActiveDominus()
      +void requestHelp(DominusDto source, DominusDto target, IntrigueCard intrigue)
      +CompletionStage<Void> playIntrigue(DominusDto source, DominusDto target, IntrigueCard intrigue)
      +void sellIntrigue(IntrigueCardDto intrigue)
      +void useDominusSkill(DominusDto dominus)
      +CompletionStage<Void> playReaction(DominusDto source, ReactionCard reactionCard, IntrigueCard intrigueTarget)
      +void finishTurn(DominusDto dominus)
    '  MarketPhase
      +CompletionStage<Void> makeOffer(OfferDto offer)
      +void acceptOffer(OfferDto offer)
      +void declineOffer(OfferDto offer)
      +void sellCard(DominusDto source, Card card)
      +void finishTrading(DominusDto dominus)
      +void makeBet(DominusDto source, int goldCoins)
    }

    ~class CoreGame extends Game{
      -Instant startTime
      -Instant finishedTime
      -List<Dominus> dominusList
      -Deck<MarketCard> marketDeck
      -Deck<IntrigueCard> intrigueDeck
      -Phase gamePhase
      -State gameState
      -List<UpkeepPhase> upkeepPhase
      -List<IntriguePhase> intriguePhase
      -List<MarketPhase> marketPhase
      -List<ArenaPhase> arenaePhase
    }

    CoreGame *-- Dominus
    CoreGame *-- Phase
    CoreGame *-- UpkeepPhase
    CoreGame *-- IntriguePhase
    CoreGame *-- MarketPhase
    CoreGame *-- ArenaPhase
    CoreGame *-- State

    ~class Dominus{
     -DominusCard dominusCard
     -Player activePlayer
     -List<GladiatorCard> gladiators
     -List<SlaveCard> slaves
     -List<EquipmentCard> equipmentCard
     -List<IntrigueCard> hand
     -Integer guardsNumber
     -Integer goldCoins
     -Integer influence
     -boolean arenaHost
     ~void giveGold(int goldCoins)
     ~void takeGold(int goldCoins)
     ~void increaseInfluence(int influence)
     ~void decreaseInfluence(int influence)
     ~void giveCard(Card card)
     ~void takeCard(Card card)
     ~void moveGuardFromHand()
    }

    Dominus*--Player

    ~class Player{
     -String name
     -String sessionToken
     -String avatar
     ~getters()
    }

    ~class UpkeepPhase{
      ~void chooseGladiatorsToRelease(Dominus target)
    }

    UpkeepPhase*--Dominus

    ~class IntriguePhase{
     List<Intrigue> intrigues
     ~Dominus getActiveDominus()
     ~boolean isDominusActive()
     ~void requestHelp(Intrigue intrigue)
     ~CompletionStage<Void> playIntrigue(Intrigue intrigue)
     ~void sellIntrigue(IntrigueCard intrigue)
     ~void useDominusSkill(Dominus dominus)
     ~void playReaction(Intrigue intrigue)
     ~void finishTurn(Dominus dominus)
    }

    IntriguePhase*-- Dominus
    IntriguePhase*-- Intrigue

    ~class Intrigue{
      -IntrigueState intrigueState
      -Dominus source
      -Dominus support
      -Set<Dominus> target
      -SchemeCard schemeCard
      -List<ReactionCard> reactions
      ~getters()
      playReaction(Intrigue intrigue)
    }

    Intrigue *-- IntrigueState
    Intrigue *-- Dominus

    ~class MarketPhase{
        -List<MarketCard> auction
        -MarketCard revealedMarkedCard
        -Map<Dominus, MarketCard> completedTrades
        -List<Offer> offersMade
        -Map<Dominus, Integer> stash
        ~makeOffer(Offer offer)
        ~void acceptOffer(Offer offer)
        ~void declineOffer(Offer offer)
        ~void finishTrading(Dominus dominus)
        ~void makeBet(Dominus source, int goldCoins)
    }

    MarketPhase *-- Dominus
    MarketPhase *-- Offer

    ~class Offer{
        -String id
        -Dominus source
        -Card card
        -Integer goldCoins
        -Dominus target
        -OfferState state
        ~getters()
    }

    Offer *-- OfferState
    Offer *-- Dominus

    enum IntrigueState{
        ACTIVE
        SUCCESS
        FAILURE
    }
    enum OfferState{
        ACTIVE
        DECLINED
    }

    enum State{
        NEW
        STARTED
        PAUSED
        ABANDONED
        FINISHED
    }

    enum Phase{
        LOBBY
        UPKEEP
        INTRIGUE
        MARKET
        ARENA
        AWARDS

    }
}
@enduml